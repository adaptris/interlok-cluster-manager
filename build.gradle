plugins {
  id 'java'
  id 'maven'
  id 'maven-publish'
  id  "jacoco"
  id 'com.github.spotbugs' version '2.0.0'
  id "io.freefair.lombok" version "3.7.5"
}

ext {
  interlokCoreVersion = project.hasProperty('interlokCoreVersion') ? project.getProperty('interlokCoreVersion') : '3.9-SNAPSHOT'
  releaseVersion = project.hasProperty('releaseVersion') ? project.getProperty('releaseVersion') : '3.9-SNAPSHOT'
  nexusBaseUrl = project.hasProperty('nexusBaseUrl') ? project.getProperty('nexusBaseUrl') : 'https://nexus.adaptris.net/nexus'
  mavenPublishUrl = project.hasProperty('mavenPublishUrl') ? project.getProperty('mavenPublishUrl') : nexusBaseUrl + '/content/repositories/snapshots'
  javadocsBaseUrl = nexusBaseUrl + "/content/sites/javadocs/com/adaptris"
  repoUsername = project.hasProperty('repoUsername') ? project.getProperty('repoUsername') : 'unknown'
  repoPassword = project.hasProperty('repoPassword') ? project.getProperty('repoPassword') : 'unknown'
  defaultNexusRepo = project.hasProperty('defaultNexusRepo') ? project.getProperty('defaultNexusRepo') : 'https://repo1.maven.org/maven2/'
  offlineJavadocPackageDir = new File(project.buildDir, "offline-javadoc-packages")

  interlokJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-core/" + interlokCoreVersion
  interlokCommonJavadocs= project.hasProperty('interlokJavadocs') ? project.getProperty('interlokJavadocs') : javadocsBaseUrl + "/interlok-common/" + interlokCoreVersion
  componentName='Interlok/Cluster Management'
  organizationName = "Adaptris Ltd"
  organizationUrl = "http://interlok.adaptris.net"
  log4j2Version="2.11.2"
  junitJupiterVersion = '5.4.2'
  jGroupsVersion = '4.0.16.Final'
}

if (JavaVersion.current().isJava8Compatible()) {
  allprojects {
    tasks.withType(Javadoc) {
      options.addStringOption('Xdoclint:none', '-quiet')
    }
  }
}

sourceCompatibility = 1.8
group   = 'com.adaptris'
version = releaseVersion
def versionDir = "$buildDir/version"

// don't generate the lombok config repeatedly
generateLombokConfig.enabled = false

// In this section you declare where to find the dependencies of your project
repositories {
  mavenCentral()
  maven { url "$defaultNexusRepo" }
  maven { url "$nexusBaseUrl/content/groups/public" }
  maven { url "$nexusBaseUrl/content/groups/interlok" }
}

configurations {
  javadoc {}
  offlineJavadocPackages {}
  all*.exclude group: 'c3p0'
  all*.exclude group: 'commons-logging'
  all*.exclude group: 'javamail'
  all*.exclude group: 'javax.mail', module: 'mail'
  all*.exclude group: 'org.glassfish.hk2.external'
  all*.exclude group: 'xalan', module: 'xalan'
  all*.exclude group: 'net.sf.saxon', module: 'saxon'
  all*.exclude group: 'org.codehaus.woodstox'
  all*.exclude group: 'org.eclipse.jetty.orbit', module: 'javax.mail.glassfish'
}

configurations.all {
  resolutionStrategy.cacheChangingModulesFor 0, "seconds"
}

dependencies {
  compile  ("com.adaptris:interlok-core:$interlokCoreVersion") { changing= true}
  compile  ("com.adaptris:interlok-common:$interlokCoreVersion") { changing= true}
  
  compile ("org.jgroups:jgroups:$jGroupsVersion")
  
  annotationProcessor ("com.adaptris:interlok-core-apt:$interlokCoreVersion") {changing= true}

  testCompile  ('org.junit.jupiter:junit-jupiter-api:5.5.0')
  testCompile  ('org.junit.jupiter:junit-jupiter:5.4.2')
  
  testCompile  ("com.adaptris:interlok-stubs:$interlokCoreVersion") { changing= true}
  
  testCompile  ("org.apache.logging.log4j:log4j-core:$log4j2Version")
  testCompile  ("org.apache.logging.log4j:log4j-1.2-api:$log4j2Version")
  testCompile  ("org.apache.logging.log4j:log4j-api:$log4j2Version")
  
  testCompile  ("org.mockito:mockito-all:1.10.19")

  javadoc("com.adaptris:interlok-core-apt:$interlokCoreVersion") { changing= true}

  offlineJavadocPackages ("com.adaptris:interlok-core:$interlokCoreVersion:javadoc@jar") { changing= true}
  offlineJavadocPackages ("com.adaptris:interlok-common:$interlokCoreVersion:javadoc@jar") { changing= true}

}

jar {
  manifest {
    attributes("Built-By": System.getProperty('user.name'),
               "Build-Jdk": System.getProperty('java.version'),
               "Implementation-Title": componentName,
               "Implementation-Version": project.version,
               "Implementation-Vendor-Id": project.group,
               "Implementation-Vendor": organizationName)
  }
}

sourceSets {
  main {
    output.dir(versionDir, builtBy: 'generateVersion')
  }
}
// Generate the META-INF/adaptris-version file
task generateVersion {
  doLast {
    def versionFile = new File(new File(versionDir, 'META-INF'), 'adaptris-version')
    versionFile.getParentFile().mkdirs()
    ant.propertyfile(file: versionFile) {
      entry(key: 'component.name', value: componentName)
      entry(key: 'build.version', value: releaseVersion)
      entry(key: 'groupId', value: "com.adaptris")
      entry(key: 'artifactId', value: project.name)
      entry(key: 'build.date', value: new Date().format('yyyy-MM-dd'))
    }
  }
}

task offlinePackageList(type: Copy) {
  description 'Build an offline package-list for javadocs'
  group 'documentation'

  project.configurations.offlineJavadocPackages.collect { dependency ->
    from(zipTree(dependency)) {
      into dependency.name
    }
  }
  include "package-list"
  into offlineJavadocPackageDir
}

javadoc {
  configure(options) {
    options.linksOffline(interlokJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-core-$interlokCoreVersion-javadoc.jar")
    options.linksOffline(interlokCommonJavadocs, offlineJavadocPackageDir.getCanonicalPath() + "/interlok-common-$interlokCoreVersion-javadoc.jar")
    taglets = ["com.adaptris.taglet.ConfigTaglet", "com.adaptris.taglet.LicenseTaglet"]
    options.addStringOption "tagletpath", configurations.javadoc.asPath
    title= componentName
  }
}

test {
  useJUnitPlatform()
}

jacoco {
  toolVersion="0.8.3"
}

jacocoTestReport {
    reports {
        xml.enabled true
        html.enabled true
    }
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives javadocJar
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      from components.java

      artifact javadocJar { classifier "javadoc" }

      pom.withXml {
        asNode().appendNode("name", componentName)
        asNode().appendNode("description", "Management component for reporting on cluster instances.")
        asNode().appendNode("url", "http://interlok.adaptris.net/interlok-docs/advanced-clustering.html")
        def properties = asNode().appendNode("properties")
        properties.appendNode("target", "3.9.0+")
        properties.appendNode("license", "false")
        properties.appendNode("tags", "cluster,management")
      }
    }
  }
  repositories {
    maven {
      credentials {
        username repoUsername
        password repoPassword
      }
      url mavenPublishUrl
    }
  }
}

spotbugs {
  // showProgress = "true"
  effort = "max"
  // Ignore failures?
  // ignoreFailures = false

  // We only care about "high priority" issues...
  reportLevel = "high"
}

// disable spotbugsTests which checks our test code..
spotbugsTest.enabled = false

tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    xml.enabled = false
    html.enabled = true
  }
}


task deleteGeneratedFiles(type: Delete) {
  delete 'activemq-data'
  delete 'data'
}


javadoc.dependsOn offlinePackageList
check.dependsOn jacocoTestReport
clean.dependsOn deleteGeneratedFiles
